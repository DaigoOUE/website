class Cell {
  float x, y, d;
  color col;
  int s; //0:white 1:red 2:blue

  Cell(float X, float Y, int S) {
    x = X;
    y = Y;
    s = S;
  }

  void display() {
    set_color();
    rectMode(CENTER);
    fill(col);
    stroke(col);
    rect(x, y, width/num, width/num);
  }

  int put_state() {
    return(s);
  }

  void set_state(Cell c1, Cell c2, Cell c3, Cell c4) {
    Cell[] c = new Cell[4];
    int n_red = 0;
    int n_blue = 0;
    c[0] = c1;
    c[1] = c2;
    c[2] = c3;
    c[3] = c4;
    for (int i = 0; i < c.length; ++i) {
      if (c[i].put_state() == 1) {
        ++n_red;
      } else if (c[i].put_state() == 2) {
        ++n_blue;
      }
    }
    if (s == 0) {
      if (n_red > n_blue) {
        s = 1;
      } else if (n_red < n_blue) {
        s = 2;
      } else {
        s = 0;
      }
    } else if (s == 1) {
      if (n_red + 1 > n_blue) {
        s = 1;
      } else if (n_red + 1 < n_blue) {
        s = 2;
      } else {
        s = 0;
      }
    } else if (s == 2) {
      if (n_red > n_blue + 1) {
        s = 1;
      } else if (n_red < n_blue + 1) {
        s = 2;
      } else {
        s = 0;
      }
    }
    add_noise();
  }

  void set_color() {
    if (s == 0) {
      if (random(0, 1)<0.5) {
        col = color(230.2, 60.6, 93.4);
      } else {
        col = color(82.5, 96.5, 192);
      }
    } else if (s == 1) {
      col = color(230.2, 60.6, 93.4);
    } else {
      col = color(82.5, 96.5, 192);
    }
  }

  void add_noise() {
    float rand = random(0, 1);
    if (rand < 0.01) {
      s = 0;
    } else if (rand < 0.11) {
      s = 1;
    } else if (rand < 0.21) {
      s = 2;
    } else {
    }
  }
}



int num = 120;
Cell[] cell = new Cell[num*num];

void setup() {
  size(max(window.innerWidth,600), max(window.innerHeight,600));
  float x, y;
  int s;
  for (int i = 0; i < num; ++i) {
    for (int j = 0; j < num; ++j) {
      x = i*width/num + width/num/2;
      y = j*width/num + width/num/2;
      s = random_int();
      cell[i*num+j] = new Cell(x, y, s);
    }
  }
  frameRate(10);
}

void draw() {
  background(29);
  for (int i = 0; i < num; ++i) {
    for (int j = 0; j < num; ++j) {
      update_cells(i, j);
      cell[i*num+j].display();
    }
  }
}

int random_int() {
  float rand = random(0, 1);
  if (rand < 0.33) {
    return(0);
  } else if (rand < 0.67) {
    return(1);
  } else {
    return(2);
  }
}

void update_cells(int i, int j) {
  if (i == 0) {
    if (j == 0) {
      cell[i*num+j].set_state(cell[num-1 + j], cell[(i+1)*num + j], cell[i*num + (num-1)], cell[i*num+ (j+1)]);
    } else if (j == num-1) {
      cell[i*num+j].set_state(cell[num-1 + j], cell[(i+1)*num + j], cell[i*num + (j-1)], cell[i*num + 0]);
    } else {
      cell[i*num+j].set_state(cell[(num-1)*num + j], cell[(i+1)*num + j], cell[i*num + (j-1)], cell[i*num + (j+1)]);
    }
  } else if (j == 0) {
    if (i == num-1) {
      cell[i*num+j].set_state(cell[(i-1)*num + j], cell[0 + j], cell[i*num + (num-1)], cell[i*num + (j+1)]);
    } else {
      cell[i*num+j].set_state(cell[(i-1)*num + j], cell[(i+1)*num + j], cell[i*num + (num-1)], cell[i*num + (j+1)]);
    }
  } else if (i == num-1) {
    if (j == num-1) {
      cell[i*num+j].set_state(cell[(i-1)*num + j], cell[0 + j], cell[i*num + (j-1)], cell[i* num + 0]);
    } else {
      cell[i*num+j].set_state(cell[(i-1)*num + j], cell[0 + j], cell[i*num + (j-1)], cell[i*num + (j+1)]);
    }
  } else if (j == num-1) {
    cell[i*num+j].set_state(cell[(i-1)*num + j], cell[(i+1)*num + j], cell[i*num + (j-1)], cell[i*num + 0]);
  } else {
    cell[i*num+j].set_state(cell[(i-1)*num + j], cell[(i+1)*num + j], cell[i*num + (j-1)], cell[i*num + (j+1)]);
  }
}

float time = 0;
float step = 0.001;

int Nb = 10;
float radiusOfBubble = window.innerWidth/20;

void setup() {
  size(window.innerWidth, window.innerHeight);
  colorMode(HSB, 100);
  for (int i = 0; i < bubble.length; ++i) {
    bubble[i] = new Bubble();
  }
  frameRate(40);
}

Bubble[] bubble = new Bubble[Nb];
Field field = new Field();

void draw() {
  size(window.innerWidth, window.innerHeight);
  background(29*100/255);
  for (int i = 0; i < bubble.length; ++i) {
    bubble[i].run(field);
  }
  for (int i = 0; i < bubble.length; ++i) {
    for (int j = i+1; j < bubble.length; ++j) {
      judge(bubble[i], bubble[j]);
    }
  }

  time += step;
}

void absorption(Bubble b1, Bubble b2) {
  if (b1.r/2 > b2.r/2) {
    if (b1.r < 200) {
      b1.r += b2.r/6;
      b1.vol = PI*pow(b1.r/2, 2);
    }
    b2.reset();
  } else {
    if (b2.r < 200) {
      b2.r += b1.r/6;
      b2.vol = PI*pow(b2.r/2, 2);
    }
    b1.reset();
  }
}

void judge(Bubble b1, Bubble b2) {
  float distance = sqrt(pow(b1.x[0]-b2.x[0], 2)+pow(b1.x[1]-b2.x[1], 2));
  if (distance < b1.r/2 + b2.r/2) {
    absorption(b1, b2);
  }
}

class Field {
  float rho = 10000;
  float g = 1;
  float force(Bubble b) {
    float a;
    a = -rho*b.vol*g + g*b.m - b.vol*b.v;
    return(a);
  }
}

class Bubble {
  float[] x = new float[2];
  float v;
  float a;
  float f;
  float r, m, vol;
  float density = 0.1;

  Bubble() {
    r = random(10, radiusOfBubble);
    vol = PI*pow(r/2, 2);
    m = vol*density;  
    x[0] = random(0, width);
    x[1] = random(0, height);
    v = random(-1, 1);
  }

  void force(Field fld) {
    f = fld.force(this);
  }

  void neq() {
    a = f/m;
  }

  void reset() {
    x[0] = random(0, width);
    x[1] = random(height*random(0.8, 1), height);
    v = random(-1, 1);
    r = random(10, radiusOfBubble);
    if ((r%2 == 0)||(r < 10)) {
      r = 0;
    }
    vol = PI*pow(r/2, 2);
    m = vol*density;
  }

  void parameterSet() {
    for (int i = 0; i < 2; ++i) {
      v += a*step;
      x[1] += v*step;
    }
    if ((x[0]-r/2 > width)||(x[0]+r/2 < 0)) {
      reset();
    }
    if (x[1]+r/2 < 0) {
      reset();
    }
    if (r == 0) {
      for (int i = 0; i < 100000000; ++i) {
      }
      reset();
    }
  }

  void display() {
    noStroke();
    fill(255, 5+20*x[1]/height);
    for (int i = 0; i < 3; ++i) {
      ellipse(x[0], x[1], r, r);
    }
  }

  void run(Field fld) {
    force(fld);
    neq();
    parameterSet();
    display();
  }
}
